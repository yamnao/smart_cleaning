type_of_plot = 'cum_muac',
group = 'All')
doc <- doc |> officer::body_add_gg(value = plot,
width = 4,
height = 3)|>
officer::body_add_fpar(officer::fpar(officer::ftext("Figure 5: Cumulative distribution of MUAC", prop = caption_text_style)), style = "Normal")|>
officer::body_add_par(" ", style = "Normal")
#Concat probability plot
doc <- doc |>
officer::body_add_par("Quantile-quantile plots of anthropometric indices (after exclusion of flagged observations)",
style = "heading 3") |>
officer::body_add_par(" ", style = "Normal")
plot1 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'prob_plot_WHZ',
group = 'All')
plot2 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'prob_plot_HAZ',
group = 'All')
plot3 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'prob_plot_WAZ',
group = 'All')
combined_plot <- cowplot::plot_grid(plot1, plot2, plot3,
ncol = 2)
doc <- doc |> officer::body_add_gg(value = combined_plot)|>
officer::body_add_fpar(officer::fpar(officer::ftext("Figure 6: Quantile-quantile plots of WHZ, WAZ and HAZ", prop = caption_text_style)), style = "Normal")|>
officer::body_add_par(" ", style = "Normal")|>
officer::body_add_par(paste("Note: Quantile-quantile plots are a good way to check whether data are distributed according to a normal distribution,",
"which is expected for anthropometric data, and suggests good data quality.",
"If the dots in the graphs align closely with the diagonal line, the data are distributed normally.", sep=" "))|>
officer::body_add_par(" ", style = "Normal")
#Concat cluster distribution
doc <- doc |>
officer::body_add_par("Distribution of moderate and severe acute malnutrition cases by survey cluster",
style = "heading 3") |>
officer::body_add_par(" ", style = "Normal")
plot1 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'distr_WHZ_2',
group = 'All')
plot2 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'distr_WHZ_3',
group = 'All')
legend <- get_legend(plot1)
plot1 <- plot1 + ggplot2::theme(legend.position = "none")
plot2 <- plot2 + ggplot2::theme(legend.position = "none")
combined_plot <- cowplot::plot_grid(plot1, plot2,
ncol = 1,
rel_heights = c(2, 2))
combined_plot <- cowplot::plot_grid(
combined_plot,
legend,
ncol = 2,
rel_widths = c(3.5, 1)  # Adjust widths
)
doc <- doc |> officer::body_add_gg(value = combined_plot,
height = 8,
width = 6)|>
officer::body_add_fpar(officer::fpar(officer::ftext("Figure 7: Distribution of moderate and severe acute malnutrition cases", prop = caption_text_style)), style = "Normal")|>
officer::body_add_par(" ", style = "Normal")|>
officer::body_add_par(paste("Note: If MAM and SAM cases are randomly distributed across the survey clusters, they will be distributed more or less according to a Poisson distribution; if, on the other hand, they are clustered in specific locations where data were collected, a negative binomial distribution will fit the data better.",
"Clustering of SAM and MAM cases may reflect genuinely worse conditions in some survey clusters, but it could also be a sign of problems with the quality of data collection in some locations.",
sep=" "))|>
officer::body_add_par(" ", style = "Normal")
## ANALYSIS BY TEAM -TABLE  --------------------------------
doc <- officer::body_add_break(doc)
doc <- doc |>
officer::body_add_par("Indicators by survey team", style = "heading 2") |>
officer::body_add_par(" ", style = "Normal")
# Add table
table <- table_analysis_per_team(folder_name = item)
doc <- f_modify_table_style(doc, table) |>
officer::body_add_par(paste("Note: Obvious differences among survey teams may indicate data collection problems, and warrant further investigation.",
sep=" "))|>
officer::body_add_par(" ", style = "Normal")
plot2 <- plot_anthro(folder_name = item,
exclusion = 'without',
type_of_plot = 'age_team',
group = 'All')
doc <- doc |> officer::body_add_gg(value = plot2 ,
height = 4,
width = 6)|>
officer::body_add_fpar(officer::fpar(officer::ftext("Figure 8: Age Distribution per Team", prop = caption_text_style)), style = "Normal")|>
officer::body_add_par(" ", style = "Normal")
#SAVE THE DOC -------------------
name <- gsub("[ .-]", "_", strsplit(information[information$type_info == 'old_name',]$values, split = ".as")[[1]][1])
name <- substr(name, start=1, stop=30)
print(doc, target = paste(item, '/', "plausibility_check_", name,".docx", sep=""))
print(doc, target = paste(item, '/', "plausibility_check_", name,".docx", sep=""))
library(smartcleaning)
all_survey_folder
# List all items (files/folders) in the current folder
items <- list.files(all_survey_folder,
full.names = TRUE)
log_file <- rio::import(paste(all_survey_folder, '/metadata.csv',sep = ''))
all_survey_folder <- 'C://Users/YamnaOuchtar/OneDrive - London School of Hygiene and Tropical Medicine/Documents/Kenya/ken_estimation_mortality/01_extract_smart_surveys/results_per_counties/'
# List all items (files/folders) in the current folder
items <- list.files(all_survey_folder,
full.names = TRUE)
log_file <- rio::import(paste(all_survey_folder, '/metadata.csv',sep = ''))
# Generate and create a metadata file  for the raw folder
metadata <- generate_metadata_file(all_survey_folder)
items
item <- items[2]
# Clean information in the log_file
information <- f_add_clean_infos(item, log_file)
# Clean and save cluster data
f_clean_and_export_cluster_data(item, information)
path_data <- item
## Add cleaning process for mortality data
mortality_data <- rio::import(path_data)
path_data
folder_name <- item
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'mortality', x=all_files)]
## But one without any cleaning process
unwanted <- all_files[grepl(pattern = 'clean', x=all_files)]
wanted <- base::setdiff(all_files, unwanted)
# Extract name of the data
path_data <- paste(folder_name,'/', wanted[1], sep="")
name_data <- strsplit(path_data, split='_mortality_data')[[1]][1]
## Add cleaning process for mortality data
mortality_data <- rio::import(path_data)
View(mortality_data)
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'nutrition', x=all_files)]
## But one without any cleaning process
unwanted <- all_files[grepl(pattern = 'clean', x=all_files)]
wanted <- base::setdiff(all_files, unwanted)
# Extract name of the data
path_data <- paste(folder_name,'/', wanted[1], sep="")
name_data <- strsplit(path_data, split='_nutrition')[[1]][1]
# Read nutrition data
nutrition_data <- rio::import(path_data)
View(nutrition_data)
# Calculate GAM and SAM - 1 if existing, 0 else
nutrition_data['edema'] <- ifelse(nutrition_data$EDEMA == 'No', yes=0, no=1)
nutrition_data$edema
nutrition_data <- nutrition_data |>
dplyr::mutate(
SAM = ifelse(WHZ < -3 | MUAC < 115 | edema == 1, 1, 0),
GAM = ifelse(WHZ < -2 | MUAC < 125 | edema == 1, 1, 0)
)
View(nutrition_data)
# Read nutrition data
nutrition_data <- rio::import(path_data)
# Remove WHZ, WAZ or HAZ with NA values
nutrition_data <- nutrition_data |>
dplyr::filter_at(dplyr::vars(WAZ, HAZ, WHZ),dplyr::all_vars(!is.na(.)))
if(nrow(nutrition_data) == 0){
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', NA))
information <- rbind(information, c('flag_waz', NA))
information <- rbind(information, c('flag_haz', NA))
information <- rbind(information, c('flag_bio', NA))
information <- rbind(information, c('sample_size_nutrition', NA))
information <- rbind(information, c('nb_boys', NA))
information <- rbind(information, c('nb_girls', NA))
information <- rbind(information, c('prevalence_sam', NA))
information <- rbind(information, c('prevalence_gam', NA))
return(list(nutrition_data, information))
}
# Flag line depending of the criteria -- so add 3 fl
# Select the cleaning criteria
criteria <- f_dico_cleaning_criteria()[[cleaning_criteria]]
#' Function to read and save the different nutrition data
#'
#' @param folder_name Folder name
#' @return [data.frame] Save nutrition data in the right folder
#' @export
f_clean_and_export_nutritition_data <- function(folder_name, information, cleaning_criteria){
## Select all the files in the folder
all_files <- list.files(path = folder_name, pattern = ".csv")
## Find the cluster one
all_files <- all_files[grepl(pattern = 'nutrition', x=all_files)]
## But one without any cleaning process
unwanted <- all_files[grepl(pattern = 'clean', x=all_files)]
wanted <- base::setdiff(all_files, unwanted)
## If there is a cluster file - we can clean it
if(length(wanted) != 0){
if(information[information$type_info == 'access_nutrition',]$values == TRUE){
# Extract name of the data
path_data <- paste(folder_name,'/', wanted[1], sep="")
name_data <- strsplit(path_data, split='_nutrition')[[1]][1]
# List containing 2 dataframe - first one is the nutrition data and second one information updated
output_nutrition_information <- f_clean_nutrition_data(path_data,
information,
cleaning_criteria)
clean_nutrition_data <- output_nutrition_information[1]
write.table(clean_nutrition_data,
file = paste(name_data, '_nutrition_data_clean.csv', sep=""),
append = FALSE,
sep=',',
col.names=TRUE,
row.names = FALSE)
return(output_nutrition_information[2])
}
}
return(information)
}
#' Function to generaye dico cleaning criteria as developed in Marko paper
#'
#' @return [dict] List of list containing the cleaning criteria
#' @export
f_dico_cleaning_criteria <- function(){
dico_cleaning <- list()
# TRUE - because we don't want to excluse any
dico_cleaning[['who_2006']] <- list(haz_low = -6,
haz_up = 6,
waz_low = -6,
waz_up = 5,
whz_low = -5,
whz_up = 5,
bio_haz_up = TRUE,
bio_whz_low = TRUE,
bio_haz_low = TRUE,
bio_whz_up = TRUE)
dico_cleaning[['smart_flag']] <- list(haz_low = -3,
haz_up = 3,
waz_low = -3,
waz_up = 3,
whz_low = -3,
whz_up = 3,
bio_haz_up = TRUE,
bio_whz_low = TRUE,
bio_haz_low = TRUE,
bio_whz_up = TRUE)
dico_cleaning[['who_1995_survey']] <- list(haz_low = -4,
haz_up = 3,
waz_low = -4,
waz_up = 4,
whz_low = -4,
whz_up = 4,
bio_haz_up = TRUE,
bio_whz_low = TRUE,
bio_haz_low = TRUE,
bio_whz_up = TRUE)
dico_cleaning[['who_1995_growth']] <- list(haz_low = -5,
haz_up = 3,
waz_low = -5,
waz_up = 5,
whz_low = -4,
whz_up = 5,
bio_haz_up = TRUE,
bio_whz_low = TRUE,
bio_haz_low = TRUE,
bio_whz_up = TRUE)
dico_cleaning[['epi_info']] <- list(haz_low = -6,
haz_up = 6,
waz_low = -6,
waz_up = 6,
whz_low = -4,
whz_up = 6,
bio_haz_up = 3.09,
bio_whz_low = -3.09,
bio_haz_low = -3.09,
bio_whz_up = 3.09)
return(dico_cleaning)
}
#' Function to clean nutrition data: add flag in the nutrition data +
#' generate dataframe with clean nutrition data - without the one flagged +
#' modify the information by calculating the flag coefficient
#'
#' @param path_data Path for nutrition data
#' @return [list] Clean nutrition data + information update
#' @export
f_clean_nutrition_data <- function(path_data, information,
cleaning_criteria){
# Read nutrition data
nutrition_data <- rio::import(path_data)
# Remove WHZ, WAZ or HAZ with NA values
nutrition_data <- nutrition_data |>
dplyr::filter_at(dplyr::vars(WAZ, HAZ, WHZ),dplyr::all_vars(!is.na(.)))
if(nrow(nutrition_data) == 0){
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', NA))
information <- rbind(information, c('flag_waz', NA))
information <- rbind(information, c('flag_haz', NA))
information <- rbind(information, c('flag_bio', NA))
information <- rbind(information, c('sample_size_nutrition', NA))
information <- rbind(information, c('nb_boys', NA))
information <- rbind(information, c('nb_girls', NA))
information <- rbind(information, c('prevalence_sam', NA))
information <- rbind(information, c('prevalence_gam', NA))
return(list(nutrition_data, information))
}
# Flag line depending of the criteria -- so add 3 fl
# Select the cleaning criteria
criteria <- f_dico_cleaning_criteria()[[cleaning_criteria]]
# First flag WHZ
mean_WHZ <- mean(nutrition_data$WHZ)
nutrition_data['flag_WHZ'] <- ifelse(nutrition_data$WHZ > criteria$whz_up + mean_WHZ |
nutrition_data$WHZ < mean_WHZ + criteria$whz_low , 1, 0)
# Second flag WAZ
mean_WAZ <- mean(nutrition_data$WAZ)
nutrition_data['flag_WAZ'] <- ifelse(nutrition_data$WAZ > criteria$waz_up + mean_WAZ |
nutrition_data$WAZ < mean_WAZ + criteria$waz_low , 1, 0)
# Third flag HAZ
mean_HAZ <- mean(nutrition_data$HAZ)
nutrition_data['flag_HAZ'] <- ifelse(nutrition_data$HAZ > criteria$haz_up + mean_HAZ |
nutrition_data$HAZ < mean_HAZ + criteria$haz_low , 1, 0)
# Fourth flag bio criteria
nutrition_data['flag_bio'] <- ifelse(criteria$bio_haz_up == TRUE |
!((nutrition_data$HAZ > criteria$bio_haz_up + mean_HAZ) & (nutrition_data$WHZ < criteria$bio_whz_low + mean_WHZ)) |
!((nutrition_data$HAZ < criteria$bio_haz_low + mean_HAZ) & (nutrition_data$WHZ > criteria$bio_whz_up + mean_WHZ)),
0, 1)
# Calculate GAM and SAM - 1 if existing, 0 else
nutrition_data['edema'] <- ifelse(nutrition_data$EDEMA == 'No', yes=0, no=1)
nutrition_data <- nutrition_data |>
dplyr::mutate(
SAM = ifelse(WHZ < -3 | MUAC < 115 | edema == 1, 1, 0),
GAM = ifelse(WHZ < -2 | MUAC < 125 | edema == 1, 1, 0)
)
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WHZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no = 0)))
information <- rbind(information, c('flag_waz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no= 0)))
information <- rbind(information, c('flag_haz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_HAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('flag_bio', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_bio, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('sample_size_nutrition', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data), no = NA)))
information <- rbind(information, c('nb_boys', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'm')), no = NA)))
information <- rbind(information, c('nb_girls', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'f')), no = NA)))
information <- rbind(information, c('prevalence_sam', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$SAM) / nrow(nutrition_data) * 100, no = NA)))
information <- rbind(information, c('prevalence_gam', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$GAM) / nrow(nutrition_data) * 100, no = NA)))
# Save nutrition data with flag column
write.table(nutrition_data,
file = path_data,
append = FALSE,
sep=',',
col.names=TRUE,
row.names = FALSE)
nutrition_data_clean <- nutrition_data |> dplyr::filter(flag_WHZ == 0 & flag_WAZ == 0 & flag_HAZ ==0 & flag_bio==0)
# Remove the line with flag data - and save the new nutrition data
return(list(nutrition_data_clean, information))
}
# Read nutrition data
nutrition_data <- rio::import(path_data)
# Remove WHZ, WAZ or HAZ with NA values
nutrition_data <- nutrition_data |>
dplyr::filter_at(dplyr::vars(WAZ, HAZ, WHZ),dplyr::all_vars(!is.na(.)))
if(nrow(nutrition_data) == 0){
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', NA))
information <- rbind(information, c('flag_waz', NA))
information <- rbind(information, c('flag_haz', NA))
information <- rbind(information, c('flag_bio', NA))
information <- rbind(information, c('sample_size_nutrition', NA))
information <- rbind(information, c('nb_boys', NA))
information <- rbind(information, c('nb_girls', NA))
information <- rbind(information, c('prevalence_sam', NA))
information <- rbind(information, c('prevalence_gam', NA))
return(list(nutrition_data, information))
}
# Flag line depending of the criteria -- so add 3 fl
# Select the cleaning criteria
criteria <- f_dico_cleaning_criteria()[[cleaning_criteria]]
# First flag WHZ
mean_WHZ <- mean(nutrition_data$WHZ)
nutrition_data['flag_WHZ'] <- ifelse(nutrition_data$WHZ > criteria$whz_up + mean_WHZ |
nutrition_data$WHZ < mean_WHZ + criteria$whz_low , 1, 0)
# Second flag WAZ
mean_WAZ <- mean(nutrition_data$WAZ)
nutrition_data['flag_WAZ'] <- ifelse(nutrition_data$WAZ > criteria$waz_up + mean_WAZ |
nutrition_data$WAZ < mean_WAZ + criteria$waz_low , 1, 0)
# Third flag HAZ
mean_HAZ <- mean(nutrition_data$HAZ)
nutrition_data['flag_HAZ'] <- ifelse(nutrition_data$HAZ > criteria$haz_up + mean_HAZ |
nutrition_data$HAZ < mean_HAZ + criteria$haz_low , 1, 0)
# Fourth flag bio criteria
nutrition_data['flag_bio'] <- ifelse(criteria$bio_haz_up == TRUE |
!((nutrition_data$HAZ > criteria$bio_haz_up + mean_HAZ) & (nutrition_data$WHZ < criteria$bio_whz_low + mean_WHZ)) |
!((nutrition_data$HAZ < criteria$bio_haz_low + mean_HAZ) & (nutrition_data$WHZ > criteria$bio_whz_up + mean_WHZ)),
0, 1)
# Calculate GAM and SAM - 1 if existing, 0 else
nutrition_data['edema'] <- ifelse(nutrition_data$EDEMA == 'No', yes=0, no=1)
nutrition_data <- nutrition_data |>
dplyr::mutate(
SAM = ifelse(WHZ < -3 | MUAC < 115 | edema == 1, 1, 0),
GAM = ifelse(WHZ < -2 | MUAC < 125 | edema == 1, 1, 0)
)
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WHZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no = 0)))
information <- rbind(information, c('flag_waz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no= 0)))
information <- rbind(information, c('flag_haz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_HAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('flag_bio', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_bio, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('sample_size_nutrition', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data), no = NA)))
information <- rbind(information, c('nb_boys', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'm')), no = NA)))
information <- rbind(information, c('nb_girls', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'f')), no = NA)))
information <- rbind(information, c('prevalence_sam', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$SAM) / nrow(nutrition_data) * 100, no = NA)))
information <- rbind(information, c('prevalence_gam', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$GAM) / nrow(nutrition_data) * 100, no = NA)))
information
# Read nutrition data
nutrition_data <- rio::import(path_data)
# Remove WHZ, WAZ or HAZ with NA values
nutrition_data <- nutrition_data |>
dplyr::filter_at(dplyr::vars(WAZ, HAZ, WHZ),dplyr::all_vars(!is.na(.)))
if(nrow(nutrition_data) == 0){
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', NA))
information <- rbind(information, c('flag_waz', NA))
information <- rbind(information, c('flag_haz', NA))
information <- rbind(information, c('flag_bio', NA))
information <- rbind(information, c('sample_size_nutrition', NA))
information <- rbind(information, c('nb_boys', NA))
information <- rbind(information, c('nb_girls', NA))
information <- rbind(information, c('prevalence_sam', NA))
information <- rbind(information, c('prevalence_gam', NA))
return(list(nutrition_data, information))
}
# Flag line depending of the criteria -- so add 3 fl
# Select the cleaning criteria
criteria <- f_dico_cleaning_criteria()[[cleaning_criteria]]
# First flag WHZ
mean_WHZ <- mean(nutrition_data$WHZ)
nutrition_data['flag_WHZ'] <- ifelse(nutrition_data$WHZ > criteria$whz_up + mean_WHZ |
nutrition_data$WHZ < mean_WHZ + criteria$whz_low , 1, 0)
# Second flag WAZ
mean_WAZ <- mean(nutrition_data$WAZ)
nutrition_data['flag_WAZ'] <- ifelse(nutrition_data$WAZ > criteria$waz_up + mean_WAZ |
nutrition_data$WAZ < mean_WAZ + criteria$waz_low , 1, 0)
# Third flag HAZ
mean_HAZ <- mean(nutrition_data$HAZ)
nutrition_data['flag_HAZ'] <- ifelse(nutrition_data$HAZ > criteria$haz_up + mean_HAZ |
nutrition_data$HAZ < mean_HAZ + criteria$haz_low , 1, 0)
# Fourth flag bio criteria
nutrition_data['flag_bio'] <- ifelse(criteria$bio_haz_up == TRUE |
!((nutrition_data$HAZ > criteria$bio_haz_up + mean_HAZ) & (nutrition_data$WHZ < criteria$bio_whz_low + mean_WHZ)) |
!((nutrition_data$HAZ < criteria$bio_haz_low + mean_HAZ) & (nutrition_data$WHZ > criteria$bio_whz_up + mean_WHZ)),
0, 1)
# Calculate GAM and SAM - 1 if existing, 0 else
nutrition_data['edema'] <- ifelse(nutrition_data$EDEMA == 'No', yes=0, no=1)
nutrition_data <- nutrition_data |>
dplyr::mutate(
SAM = ifelse(WHZ < -3 | MUAC < 115 | edema == 1, 1, 0),
GAM = ifelse(WHZ < -2 | MUAC < 125 | edema == 1, 1, 0)
)
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WHZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no = 0)))
information <- rbind(information, c('flag_waz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no= 0)))
information <- rbind(information, c('flag_haz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_HAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('flag_bio', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_bio, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('sample_size_nutrition', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data), no = NA)))
information <- rbind(information, c('nb_boys', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'm')), no = NA)))
information <- rbind(information, c('nb_girls', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'f')), no = NA)))
information <- rbind(information, c('prevalence_sam', ifelse(nrow(nutrition_data) != 0, yes = round(sum(nutrition_data$SAM) / nrow(nutrition_data), 2) * 100, no = NA)))
information <- rbind(information, c('prevalence_gam', ifelse(nrow(nutrition_data) != 0, yes = round(sum(nutrition_data$GAM) / nrow(nutrition_data), 3) * 100, no = NA)))
# Save nutrition data with flag column
information
# Read nutrition data
nutrition_data <- rio::import(path_data)
# Remove WHZ, WAZ or HAZ with NA values
nutrition_data <- nutrition_data |>
dplyr::filter_at(dplyr::vars(WAZ, HAZ, WHZ),dplyr::all_vars(!is.na(.)))
if(nrow(nutrition_data) == 0){
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', NA))
information <- rbind(information, c('flag_waz', NA))
information <- rbind(information, c('flag_haz', NA))
information <- rbind(information, c('flag_bio', NA))
information <- rbind(information, c('sample_size_nutrition', NA))
information <- rbind(information, c('nb_boys', NA))
information <- rbind(information, c('nb_girls', NA))
information <- rbind(information, c('prevalence_sam', NA))
information <- rbind(information, c('prevalence_gam', NA))
return(list(nutrition_data, information))
}
# Flag line depending of the criteria -- so add 3 fl
# Select the cleaning criteria
criteria <- f_dico_cleaning_criteria()[[cleaning_criteria]]
# First flag WHZ
mean_WHZ <- mean(nutrition_data$WHZ)
nutrition_data['flag_WHZ'] <- ifelse(nutrition_data$WHZ > criteria$whz_up + mean_WHZ |
nutrition_data$WHZ < mean_WHZ + criteria$whz_low , 1, 0)
# Second flag WAZ
mean_WAZ <- mean(nutrition_data$WAZ)
nutrition_data['flag_WAZ'] <- ifelse(nutrition_data$WAZ > criteria$waz_up + mean_WAZ |
nutrition_data$WAZ < mean_WAZ + criteria$waz_low , 1, 0)
# Third flag HAZ
mean_HAZ <- mean(nutrition_data$HAZ)
nutrition_data['flag_HAZ'] <- ifelse(nutrition_data$HAZ > criteria$haz_up + mean_HAZ |
nutrition_data$HAZ < mean_HAZ + criteria$haz_low , 1, 0)
# Fourth flag bio criteria
nutrition_data['flag_bio'] <- ifelse(criteria$bio_haz_up == TRUE |
!((nutrition_data$HAZ > criteria$bio_haz_up + mean_HAZ) & (nutrition_data$WHZ < criteria$bio_whz_low + mean_WHZ)) |
!((nutrition_data$HAZ < criteria$bio_haz_low + mean_HAZ) & (nutrition_data$WHZ > criteria$bio_whz_up + mean_WHZ)),
0, 1)
# Calculate GAM and SAM - 1 if existing, 0 else
nutrition_data['edema'] <- ifelse(nutrition_data$EDEMA == 'No', yes=0, no=1)
nutrition_data <- nutrition_data |>
dplyr::mutate(
SAM = ifelse(WHZ < -3 | MUAC < 115 | edema == 1, 1, 0),
GAM = ifelse(WHZ < -2 | MUAC < 125 | edema == 1, 1, 0)
)
# Sum the number of flag data for each criteria and add it to the information
information <- rbind(information, c('flag_whz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WHZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no = 0)))
information <- rbind(information, c('flag_waz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_WAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no= 0)))
information <- rbind(information, c('flag_haz', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_HAZ, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('flag_bio', ifelse(nrow(nutrition_data) != 0, yes = sum(nutrition_data$flag_bio, na.rm=TRUE)/length(nutrition_data$flag_WHZ)*100, no=0)))
information <- rbind(information, c('sample_size_nutrition', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data), no = NA)))
information <- rbind(information, c('nb_boys', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'm')), no = NA)))
information <- rbind(information, c('nb_girls', ifelse(nrow(nutrition_data) != 0, yes = nrow(nutrition_data |> dplyr::filter(SEX == 'f')), no = NA)))
information <- rbind(information, c('prevalence_sam', ifelse(nrow(nutrition_data) != 0, yes = round(sum(nutrition_data$SAM) / nrow(nutrition_data) * 100, 3), no = NA)))
information <- rbind(information, c('prevalence_gam', ifelse(nrow(nutrition_data) != 0, yes = round(sum(nutrition_data$GAM) / nrow(nutrition_data) * 100, 3), no = NA)))
information
library(smartcleaning)
library(smartcleaning)
