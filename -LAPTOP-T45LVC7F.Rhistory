# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cases_observed ~ ., family = poisson, data = data_observed)
fitted(fit_poisson, type='response')
sort(fitted(fit_poisson, type='response'))
res <- data.frame(fitted(fit_poisson, type='response'))
colnames(res) <- c('nb_cases_poisson')
res$nb_cluster <- as.integer(rownames(res))
sort(res$nb_cases_poisson)
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq)
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
data_observed
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# for(ind in 0:max(df_count$CLUSTER)){
#   if(!(ind %in% df_count$CLUSTER)){
#     df_count <- rbind(df_count, c(ind, 0))
#   }
# }
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq)
data_observed
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
as.integer(data_observed$nb_cluster)
as.numeric(as.character(data_observed$nb_cluster))
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# for(ind in 0:max(df_count$CLUSTER)){
#   if(!(ind %in% df_count$CLUSTER)){
#     df_count <- rbind(df_count, c(ind, 0))
#   }
# }
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
fitted(fit_poisson, type='response')
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cases_observed ~ ., family = poisson, data = data_observed)
fitted(fit_poisson, type='response')
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# for(ind in 0:max(df_count$CLUSTER)){
#   if(!(ind %in% df_count$CLUSTER)){
#     df_count <- rbind(df_count, c(ind, 0))
#   }
# }
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
data.frame(fitted(fit_poisson, type='response'))
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# for(ind in 0:max(df_count$CLUSTER)){
#   if(!(ind %in% df_count$CLUSTER)){
#     df_count <- rbind(df_count, c(ind, 0))
#   }
# }
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cases_observed ~ ., family = poisson, data = data_observed)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
# Generate fitted values
res <- data.frame(fitted(fit_poisson, type='response'))
res
df_count
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# for(ind in 0:max(df_count$CLUSTER)){
#   if(!(ind %in% df_count$CLUSTER)){
#     df_count <- rbind(df_count, c(ind, 0))
#   }
# }
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(CLUSTER ~ ., family = poisson, data = df_count)
fitted(fit_poisson, type='response')
View(df_count)
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2)
df_count
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
glm(CLUSTER ~ ., family = poisson, data = df_count)
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(CLUSTER ~ ., family = poisson, data = df_count)
fit_poisson$fitted.values
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Import the data
nutrition_data <- rio::import(nutrition_file)
View(nutrition_data)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
ggplot(data_observed, aes(x = as.factor(nb_cluster))) +
# Add bar plot for observed values
geom_bar(aes(y = nb_cases_observed), stat = "identity", fill = "skyblue", alpha = 0.7)
View(data_observed)
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cases_observed ~ ., family = poisson, data = data_observed)
new_data <- data.frame(nb_cluser=seq(0:max(data_observed$nb_cluster)))
new_data
predict(fit_poisson, newdata = new_data)
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
predict(fit_poisson, newdata = new_data)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
predict(fit_poisson, newdata = new_data, type='response')
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
predict(fit_poisson, newdata = new_data, type='response')
# Import the data
nutrition_data <- rio::import(nutrition_file)
# Count the number of WHZ < -2 for each cluster
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
# Fit Poisson and Negative Binomial distributions
fit_poisson <- glm(nb_cluster ~ ., family = poisson, data = data_observed)
# fit_negbin <- MASS::glm.nb(nb_cases ~ ., data = data_to_plot)
predict(fit_poisson, newdata = new_data, type='response')
glm(WHZ~CLUSTER, family=poisson, data = nutrition_data)
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2)
df_count
glm(CLUSTER~NULL, family=poisson, data = df_count)
fit_poisson <- glm(CLUSTER~NULL, family=poisson, data = df_count)
fitted(fit_poisson, type='response')
fitted(fit_poisson)
fit_poisson <- glm(CLUSTER~., family=poisson, data = df_count)
df_count <- nutrition_data |>
dplyr::filter(WHZ < -2) |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
View(df_count)
fit_poisson <- glm(count~., family=poisson, data = df_count)
fitted(fit_poisson, type='response')
fitted(fit_poisson)
plot(fitted(fit_poisson))
plot(y=fitted(fit_poisson))
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
data_observed <- data.frame(table(df_count$count)) |>
dplyr::rename(nb_cluster = Var1,
nb_cases_observed = Freq) |>
dplyr::mutate(nb_cluster = as.numeric(as.character(nb_cluster)))
View(data_observed)
nutrition_data <- rio::import(nutrition_file) |>
dplyr::filter(WHZ < -2)
View(nutrition_data)
ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
nutrition_data
glm(bool_case~CLUSTER, family=poisson, data=nutrition_data)
fit_poisson <- glm(bool_case~CLUSTER, family=poisson, data=nutrition_data)
fitted(fit_poisson, type='response')
fitted(fit_poisson)
mean(data_observed$nb_cases_observed)
lambda <- 3
dpois(seq(0:13), lambda = 3)
df_count <- nutrition_data |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
for(ind in 0:max(df_count$CLUSTER)){
if(!(ind %in% df_count$CLUSTER)){
df_count <- rbind(df_count, c(ind, 0))
}
}
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
df_count <- nutrition_data |>
dplyr::group_by(CLUSTER) |>
dplyr::summarise(count = dplyr::n())
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
library(dplyr)
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
counts_by_n_malades <- cluster_counts |>
group_by(n_malades) |>
summarise(n_clusters = n())
View(counts_by_n_malades)
# Bar plot du nombre de clusters en fonction du nombre de malades
ggplot(counts_by_n_malades, aes(x = n_malades, y = n_clusters)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters par nombre de malades")
# Estimation par la loi de Poisson
lambda <- mean(cluster_counts$n_malades)
poisson_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades),
estimated_n_clusters = dpois(0:max(cluster_counts$n_malades), lambda) * sum(counts_by_n_malades$n_clusters)
)
poisson_estimation
# Bar plot de l'estimation de la loi de Poisson
ggplot(poisson_estimation, aes(x = n_malades, y = estimated_n_clusters)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(x = "Nombre de malades", y = "Nombre estimé de clusters (loi de Poisson)", title = "Estimation de la répartition des clusters selon la loi de Poisson")
# Fusionner les données observées et les estimations de Poisson pour le graphique
plot_data <- counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades", suffix = c("_observed", "_poisson"))
# Bar plot avec les estimations de Poisson superposées
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters_observed), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters_poisson), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters_poisson), color = "red", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
plot_data
# Fusionner les données observées et les estimations de Poisson pour le graphique
plot_data <- counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades", suffix = c("_observed", "_poisson")) |>
filter(!is.na(n_clusters_observed) | !is.na(estimated_n_clusters_poisson))  # Supprimer les lignes avec NA
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
# Compter combien de clusters ont un certain nombre de malades
counts_by_n_malades <- cluster_counts |>
group_by(n_malades) |>
summarise(n_clusters = n())
# Estimation par la loi de Poisson
lambda <- mean(cluster_counts$n_malades)
poisson_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades),
estimated_n_clusters = dpois(0:max(cluster_counts$n_malades), lambda) * sum(counts_by_n_malades$n_clusters)
)
# Fusionner les données observées et les estimations de Poisson pour le graphique
plot_data <- counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades", suffix = c("_observed", "_poisson"))
plot_data
plot_data[is.na(plot_data$n_clusters),]
plot_data[is.na(plot_data$n_clusters),'n_clusters']
plot_data[is.na(plot_data$n_clusters),'n_clusters'] <- 0
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
# Compter combien de clusters ont un certain nombre de malades
counts_by_n_malades <- cluster_counts |>
group_by(n_malades) |>
summarise(n_clusters = n())
# Estimation par la loi de Poisson
lambda <- mean(cluster_counts$n_malades)
poisson_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades),
estimated_n_clusters = dpois(0:max(cluster_counts$n_malades), lambda) * sum(counts_by_n_malades$n_clusters)
)
# Fusionner les données observées et les estimations de Poisson pour le graphique
plot_data <- counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades", suffix = c("_observed", "_poisson"))
plot_data[is.na(plot_data$n_clusters),'n_clusters'] <- 0
# Bar plot avec les estimations de Poisson superposées
plot_data
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters_observed), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters_poisson), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters_poisson), color = "red", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
# Bar plot avec les estimations de Poisson superposées
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters_observed), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters_poisson), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters_poisson), color = "red", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
plot_data
counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades", suffix = c("_observed", "_poisson"))
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters), color = "red", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
threshold){
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
# Compter combien de clusters ont un certain nombre de malades
counts_by_n_malades <- cluster_counts |>
group_by(n_malades) |>
summarise(n_clusters = n())
# Estimation par la loi de Poisson
lambda <- mean(cluster_counts$n_malades)
mu <- mean(cluster_counts$n_malades, na.rm = TRUE)
var <- var(cluster_counts$n_malades, na.rm = TRUE)
size <- mu^2 / (var - mu)
poisson_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades),
estimated_n_clusters = dpois(0:max(cluster_counts$n_malades), lambda) * sum(counts_by_n_malades$n_clusters)
)
# Estimation par la loi binomiale négative
negative_binomial_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades, na.rm = TRUE),  # Gérer NA dans max()
estimated_n_clusters = dnbinom(0:max(cluster_counts$n_malades, na.rm = TRUE), size = size, mu = mu) * sum(counts_by_n_malades$n_clusters, na.rm = TRUE)
)
negative_binomial_estimation
counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades") |>
full_join(negative_binomial_estimation, by='n_malades')
# Import the data
nutrition_data <- rio::import(nutrition_file)
nutrition_data$bool_case <- ifelse(nutrition_data$WHZ < -2, yes=1, no=0)
# Supposons que vos colonnes sont 'cluster' et 'WHZ'
# Identifier les patients malades (WHZ < -2)
nutrition_data$malade <- ifelse(nutrition_data$WHZ < -2, 1, 0)
# Compter le nombre de malades par cluster
cluster_counts <- nutrition_data |>
group_by(CLUSTER) |>
summarise(n_malades = sum(malade))
# Compter combien de clusters ont un certain nombre de malades
counts_by_n_malades <- cluster_counts |>
group_by(n_malades) |>
summarise(n_clusters = n())
# Estimation par la loi de Poisson
lambda <- mean(cluster_counts$n_malades)
mu <- mean(cluster_counts$n_malades, na.rm = TRUE)
var <- var(cluster_counts$n_malades, na.rm = TRUE)
size <- mu^2 / (var - mu)
poisson_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades),
estimated_n_clusters = dpois(0:max(cluster_counts$n_malades), lambda) * sum(counts_by_n_malades$n_clusters)
)
# Estimation par la loi binomiale négative
negative_binomial_estimation <- data.frame(
n_malades = 0:max(cluster_counts$n_malades, na.rm = TRUE),  # Gérer NA dans max()
estimated_n_clusters_neg = dnbinom(0:max(cluster_counts$n_malades, na.rm = TRUE), size = size, mu = mu) * sum(counts_by_n_malades$n_clusters, na.rm = TRUE)
)
# Fusionner les données observées et les estimations de Poisson pour le graphique
plot_data <- counts_by_n_malades |>
full_join(poisson_estimation, by = "n_malades") |>
full_join(negative_binomial_estimation, by='n_malades')
plot_data
plot_data[is.na(plot_data$n_clusters),'n_clusters'] <- 0
# Bar plot avec les estimations de Poisson superposées
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters), color = "red", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters), color = "red", linetype = "dashed") +
geom_point(aes(y = estimated_n_clusters_neg), color = "green", size = 3) +
geom_line(aes(y = estimated_n_clusters_neg), color = "green", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
ggplot(plot_data, aes(x = n_malades)) +
geom_bar(aes(y = n_clusters), stat = "identity", fill = "skyblue", alpha = 0.6) +
geom_point(aes(y = estimated_n_clusters), color = "red", size = 3) +
geom_line(aes(y = estimated_n_clusters), color = "red", linetype = "dashed") +
geom_point(aes(y = estimated_n_clusters_neg), color = "seagreen", size = 3) +
geom_line(aes(y = estimated_n_clusters_neg), color = "seagreen", linetype = "dashed") +
labs(x = "Nombre de malades", y = "Nombre de clusters", title = "Répartition des clusters et estimation Poisson") +
theme_minimal() +
scale_y_continuous(name = "Nombre de clusters", sec.axis = sec_axis(~ ., name = "Estimation Poisson"))
